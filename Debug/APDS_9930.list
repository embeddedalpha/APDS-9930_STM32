
APDS_9930.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005dc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000774  08000774  00010774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000784  08000784  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000784  08000784  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000784  08000784  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000784  08000784  00010784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000788  08000788  00010788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800078c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000790  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000790  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000035cf  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008bc  00000000  00000000  00023603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f8  00000000  00000000  00023ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b0  00000000  00000000  00023fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000cdb  00000000  00000000  00024068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001d23  00000000  00000000  00024d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056c47  00000000  00000000  00026a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007d6ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002a8  00000000  00000000  0007d700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800075c 	.word	0x0800075c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	0800075c 	.word	0x0800075c

080001d8 <Console_Init>:

#include "Console.h"


  void Console_Init(USART_TypeDef *port,int32_t baudrate)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]

	if(port == USART1)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	4a4a      	ldr	r2, [pc, #296]	; (8000310 <Console_Init+0x138>)
 80001e6:	4293      	cmp	r3, r2
 80001e8:	d12e      	bne.n	8000248 <Console_Init+0x70>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 80001ea:	4b4a      	ldr	r3, [pc, #296]	; (8000314 <Console_Init+0x13c>)
 80001ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80001ee:	4a49      	ldr	r2, [pc, #292]	; (8000314 <Console_Init+0x13c>)
 80001f0:	f043 0310 	orr.w	r3, r3, #16
 80001f4:	6453      	str	r3, [r2, #68]	; 0x44
		GPIO_Pin_Setup(GPIOA, 9, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART1_TX);
 80001f6:	2307      	movs	r3, #7
 80001f8:	228c      	movs	r2, #140	; 0x8c
 80001fa:	2109      	movs	r1, #9
 80001fc:	4846      	ldr	r0, [pc, #280]	; (8000318 <Console_Init+0x140>)
 80001fe:	f000 f893 	bl	8000328 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 10, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART1_RX);
 8000202:	2307      	movs	r3, #7
 8000204:	228c      	movs	r2, #140	; 0x8c
 8000206:	210a      	movs	r1, #10
 8000208:	4843      	ldr	r0, [pc, #268]	; (8000318 <Console_Init+0x140>)
 800020a:	f000 f88d 	bl	8000328 <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	68db      	ldr	r3, [r3, #12]
 8000212:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(SystemCoreClock / (16 * baudrate)) << 4;
 800021a:	4b40      	ldr	r3, [pc, #256]	; (800031c <Console_Init+0x144>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	683a      	ldr	r2, [r7, #0]
 8000220:	0112      	lsls	r2, r2, #4
 8000222:	fbb3 f3f2 	udiv	r3, r3, r2
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	461a      	mov	r2, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	f043 0208 	orr.w	r2, r3, #8
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	68db      	ldr	r3, [r3, #12]
 800023e:	f043 0204 	orr.w	r2, r3, #4
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	60da      	str	r2, [r3, #12]
	}




}
 8000246:	e05e      	b.n	8000306 <Console_Init+0x12e>
	else if(port == USART2)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a35      	ldr	r2, [pc, #212]	; (8000320 <Console_Init+0x148>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d128      	bne.n	80002a2 <Console_Init+0xca>
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8000250:	4b30      	ldr	r3, [pc, #192]	; (8000314 <Console_Init+0x13c>)
 8000252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000254:	4a2f      	ldr	r2, [pc, #188]	; (8000314 <Console_Init+0x13c>)
 8000256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800025a:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_Pin_Setup(GPIOA, 2, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART2_TX);
 800025c:	2307      	movs	r3, #7
 800025e:	228c      	movs	r2, #140	; 0x8c
 8000260:	2102      	movs	r1, #2
 8000262:	482d      	ldr	r0, [pc, #180]	; (8000318 <Console_Init+0x140>)
 8000264:	f000 f860 	bl	8000328 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 3, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART2_RX);
 8000268:	2307      	movs	r3, #7
 800026a:	228c      	movs	r2, #140	; 0x8c
 800026c:	2103      	movs	r1, #3
 800026e:	482a      	ldr	r0, [pc, #168]	; (8000318 <Console_Init+0x140>)
 8000270:	f000 f85a 	bl	8000328 <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	68db      	ldr	r3, [r3, #12]
 8000278:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	60da      	str	r2, [r3, #12]
		port -> BRR = 0x1388;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f241 3288 	movw	r2, #5000	; 0x1388
 8000286:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	f043 0208 	orr.w	r2, r3, #8
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	68db      	ldr	r3, [r3, #12]
 8000298:	f043 0204 	orr.w	r2, r3, #4
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	60da      	str	r2, [r3, #12]
}
 80002a0:	e031      	b.n	8000306 <Console_Init+0x12e>
	else if(port == USART6)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a1f      	ldr	r2, [pc, #124]	; (8000324 <Console_Init+0x14c>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d12d      	bne.n	8000306 <Console_Init+0x12e>
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 80002aa:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <Console_Init+0x13c>)
 80002ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ae:	4a19      	ldr	r2, [pc, #100]	; (8000314 <Console_Init+0x13c>)
 80002b0:	f043 0320 	orr.w	r3, r3, #32
 80002b4:	6453      	str	r3, [r2, #68]	; 0x44
		GPIO_Pin_Setup('A', 11, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART6_TX);
 80002b6:	2308      	movs	r3, #8
 80002b8:	228c      	movs	r2, #140	; 0x8c
 80002ba:	210b      	movs	r1, #11
 80002bc:	2041      	movs	r0, #65	; 0x41
 80002be:	f000 f833 	bl	8000328 <GPIO_Pin_Setup>
		GPIO_Pin_Setup('A', 12, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART6_RX);
 80002c2:	2308      	movs	r3, #8
 80002c4:	228c      	movs	r2, #140	; 0x8c
 80002c6:	210c      	movs	r1, #12
 80002c8:	2041      	movs	r0, #65	; 0x41
 80002ca:	f000 f82d 	bl	8000328 <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(SystemCoreClock / (16 * baudrate)) << 4;
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <Console_Init+0x144>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	683a      	ldr	r2, [r7, #0]
 80002e0:	0112      	lsls	r2, r2, #4
 80002e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80002e6:	011b      	lsls	r3, r3, #4
 80002e8:	461a      	mov	r2, r3
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	68db      	ldr	r3, [r3, #12]
 80002f2:	f043 0208 	orr.w	r2, r3, #8
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	f043 0204 	orr.w	r2, r3, #4
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	60da      	str	r2, [r3, #12]
}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40011000 	.word	0x40011000
 8000314:	40023800 	.word	0x40023800
 8000318:	40020000 	.word	0x40020000
 800031c:	20000000 	.word	0x20000000
 8000320:	40004400 	.word	0x40004400
 8000324:	40011400 	.word	0x40011400

08000328 <GPIO_Pin_Setup>:

#include "GPIO.h"


void GPIO_Pin_Setup(GPIO_TypeDef *Port, uint8_t pin, uint8_t function, uint8_t alternate_function)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	4608      	mov	r0, r1
 8000332:	4611      	mov	r1, r2
 8000334:	461a      	mov	r2, r3
 8000336:	4603      	mov	r3, r0
 8000338:	70fb      	strb	r3, [r7, #3]
 800033a:	460b      	mov	r3, r1
 800033c:	70bb      	strb	r3, [r7, #2]
 800033e:	4613      	mov	r3, r2
 8000340:	707b      	strb	r3, [r7, #1]
	if(Port == GPIOA)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a43      	ldr	r2, [pc, #268]	; (8000454 <GPIO_Pin_Setup+0x12c>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d106      	bne.n	8000358 <GPIO_Pin_Setup+0x30>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOAEN;
 800034a:	4b43      	ldr	r3, [pc, #268]	; (8000458 <GPIO_Pin_Setup+0x130>)
 800034c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034e:	4a42      	ldr	r2, [pc, #264]	; (8000458 <GPIO_Pin_Setup+0x130>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6313      	str	r3, [r2, #48]	; 0x30
 8000356:	e02a      	b.n	80003ae <GPIO_Pin_Setup+0x86>
	}else if(Port == GPIOB)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a40      	ldr	r2, [pc, #256]	; (800045c <GPIO_Pin_Setup+0x134>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d106      	bne.n	800036e <GPIO_Pin_Setup+0x46>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOBEN;
 8000360:	4b3d      	ldr	r3, [pc, #244]	; (8000458 <GPIO_Pin_Setup+0x130>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000364:	4a3c      	ldr	r2, [pc, #240]	; (8000458 <GPIO_Pin_Setup+0x130>)
 8000366:	f043 0302 	orr.w	r3, r3, #2
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
 800036c:	e01f      	b.n	80003ae <GPIO_Pin_Setup+0x86>
	}else if(Port == GPIOC)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a3b      	ldr	r2, [pc, #236]	; (8000460 <GPIO_Pin_Setup+0x138>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_Pin_Setup+0x5c>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOCEN;
 8000376:	4b38      	ldr	r3, [pc, #224]	; (8000458 <GPIO_Pin_Setup+0x130>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037a:	4a37      	ldr	r2, [pc, #220]	; (8000458 <GPIO_Pin_Setup+0x130>)
 800037c:	f043 0304 	orr.w	r3, r3, #4
 8000380:	6313      	str	r3, [r2, #48]	; 0x30
 8000382:	e014      	b.n	80003ae <GPIO_Pin_Setup+0x86>
	}else if(Port == GPIOD)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a37      	ldr	r2, [pc, #220]	; (8000464 <GPIO_Pin_Setup+0x13c>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <GPIO_Pin_Setup+0x72>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIODEN;
 800038c:	4b32      	ldr	r3, [pc, #200]	; (8000458 <GPIO_Pin_Setup+0x130>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000390:	4a31      	ldr	r2, [pc, #196]	; (8000458 <GPIO_Pin_Setup+0x130>)
 8000392:	f043 0308 	orr.w	r3, r3, #8
 8000396:	6313      	str	r3, [r2, #48]	; 0x30
 8000398:	e009      	b.n	80003ae <GPIO_Pin_Setup+0x86>
	}else if(Port == GPIOE)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a32      	ldr	r2, [pc, #200]	; (8000468 <GPIO_Pin_Setup+0x140>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d105      	bne.n	80003ae <GPIO_Pin_Setup+0x86>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 80003a2:	4b2d      	ldr	r3, [pc, #180]	; (8000458 <GPIO_Pin_Setup+0x130>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a6:	4a2c      	ldr	r2, [pc, #176]	; (8000458 <GPIO_Pin_Setup+0x130>)
 80003a8:	f043 0310 	orr.w	r3, r3, #16
 80003ac:	6313      	str	r3, [r2, #48]	; 0x30
	}

	Port -> MODER   |= ((0xC0  & function)>>6) << (2 * pin);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	78ba      	ldrb	r2, [r7, #2]
 80003b4:	0992      	lsrs	r2, r2, #6
 80003b6:	b2d2      	uxtb	r2, r2
 80003b8:	4611      	mov	r1, r2
 80003ba:	78fa      	ldrb	r2, [r7, #3]
 80003bc:	0052      	lsls	r2, r2, #1
 80003be:	fa01 f202 	lsl.w	r2, r1, r2
 80003c2:	431a      	orrs	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	601a      	str	r2, [r3, #0]
	Port -> OTYPER  |= ((0x30  & function)>>4) << (1 * pin);
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	78ba      	ldrb	r2, [r7, #2]
 80003ce:	0912      	lsrs	r2, r2, #4
 80003d0:	b2d2      	uxtb	r2, r2
 80003d2:	f002 0103 	and.w	r1, r2, #3
 80003d6:	78fa      	ldrb	r2, [r7, #3]
 80003d8:	fa01 f202 	lsl.w	r2, r1, r2
 80003dc:	431a      	orrs	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= ((0x0C  & function)>>2) << (2 * pin);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	78ba      	ldrb	r2, [r7, #2]
 80003e8:	0892      	lsrs	r2, r2, #2
 80003ea:	b2d2      	uxtb	r2, r2
 80003ec:	f002 0103 	and.w	r1, r2, #3
 80003f0:	78fa      	ldrb	r2, [r7, #3]
 80003f2:	0052      	lsls	r2, r2, #1
 80003f4:	fa01 f202 	lsl.w	r2, r1, r2
 80003f8:	431a      	orrs	r2, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	609a      	str	r2, [r3, #8]
	Port -> PUPDR   |= ((0x03  & function)>>0) << (2 * pin);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	68db      	ldr	r3, [r3, #12]
 8000402:	78ba      	ldrb	r2, [r7, #2]
 8000404:	f002 0103 	and.w	r1, r2, #3
 8000408:	78fa      	ldrb	r2, [r7, #3]
 800040a:	0052      	lsls	r2, r2, #1
 800040c:	fa01 f202 	lsl.w	r2, r1, r2
 8000410:	431a      	orrs	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	60da      	str	r2, [r3, #12]

	if(pin < 8)Port -> AFR[0] |= ( alternate_function << (4 * (pin)));
 8000416:	78fb      	ldrb	r3, [r7, #3]
 8000418:	2b07      	cmp	r3, #7
 800041a:	d80a      	bhi.n	8000432 <GPIO_Pin_Setup+0x10a>
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	6a1b      	ldr	r3, [r3, #32]
 8000420:	7879      	ldrb	r1, [r7, #1]
 8000422:	78fa      	ldrb	r2, [r7, #3]
 8000424:	0092      	lsls	r2, r2, #2
 8000426:	fa01 f202 	lsl.w	r2, r1, r2
 800042a:	431a      	orrs	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	621a      	str	r2, [r3, #32]
	else	   Port -> AFR[1] |= ( alternate_function << (4 * (pin - 8)));

	if (alternate_function == NONE) {}
}
 8000430:	e00a      	b.n	8000448 <GPIO_Pin_Setup+0x120>
	else	   Port -> AFR[1] |= ( alternate_function << (4 * (pin - 8)));
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000436:	7879      	ldrb	r1, [r7, #1]
 8000438:	78fa      	ldrb	r2, [r7, #3]
 800043a:	3a08      	subs	r2, #8
 800043c:	0092      	lsls	r2, r2, #2
 800043e:	fa01 f202 	lsl.w	r2, r1, r2
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	40020000 	.word	0x40020000
 8000458:	40023800 	.word	0x40023800
 800045c:	40020400 	.word	0x40020400
 8000460:	40020800 	.word	0x40020800
 8000464:	40020c00 	.word	0x40020c00
 8000468:	40021000 	.word	0x40021000

0800046c <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
	SystemInit();
 8000472:	f000 f889 	bl	8000588 <SystemInit>
	uint8_t pll_m = 25;
 8000476:	2319      	movs	r3, #25
 8000478:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 192; //192
 800047a:	23c0      	movs	r3, #192	; 0xc0
 800047c:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 4;
 8000482:	2304      	movs	r3, #4
 8000484:	713b      	strb	r3, [r7, #4]
//	uint8_t pll_m = 8;
//	uint8_t pll_n = 96; //192
//	uint8_t pll_p = 0;
//	uint8_t pll_q = 4;

	RCC->PLLCFGR = 0x00000000;
 8000486:	4b37      	ldr	r3, [pc, #220]	; (8000564 <MCU_Clock_Setup+0xf8>)
 8000488:	2200      	movs	r2, #0
 800048a:	605a      	str	r2, [r3, #4]

	RCC -> CR |= RCC_CR_HSEON;
 800048c:	4b35      	ldr	r3, [pc, #212]	; (8000564 <MCU_Clock_Setup+0xf8>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a34      	ldr	r2, [pc, #208]	; (8000564 <MCU_Clock_Setup+0xf8>)
 8000492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000496:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8000498:	bf00      	nop
 800049a:	4b32      	ldr	r3, [pc, #200]	; (8000564 <MCU_Clock_Setup+0xf8>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d0f9      	beq.n	800049a <MCU_Clock_Setup+0x2e>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 80004a6:	4b2f      	ldr	r3, [pc, #188]	; (8000564 <MCU_Clock_Setup+0xf8>)
 80004a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004aa:	4a2e      	ldr	r2, [pc, #184]	; (8000564 <MCU_Clock_Setup+0xf8>)
 80004ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b0:	6413      	str	r3, [r2, #64]	; 0x40
	PWR ->CR |= PWR_CR_VOS;
 80004b2:	4b2d      	ldr	r3, [pc, #180]	; (8000568 <MCU_Clock_Setup+0xfc>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a2c      	ldr	r2, [pc, #176]	; (8000568 <MCU_Clock_Setup+0xfc>)
 80004b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004bc:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN |
 80004be:	4b2b      	ldr	r3, [pc, #172]	; (800056c <MCU_Clock_Setup+0x100>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a2a      	ldr	r2, [pc, #168]	; (800056c <MCU_Clock_Setup+0x100>)
 80004c4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80004c8:	f043 0303 	orr.w	r3, r3, #3
 80004cc:	6013      	str	r3, [r2, #0]
			FLASH_ACR_LATENCY_3WS;
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 80004ce:	4b25      	ldr	r3, [pc, #148]	; (8000564 <MCU_Clock_Setup+0xf8>)
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	793a      	ldrb	r2, [r7, #4]
 80004d4:	0611      	lsls	r1, r2, #24
 80004d6:	797a      	ldrb	r2, [r7, #5]
 80004d8:	0412      	lsls	r2, r2, #16
 80004da:	4311      	orrs	r1, r2
 80004dc:	79ba      	ldrb	r2, [r7, #6]
 80004de:	0192      	lsls	r2, r2, #6
 80004e0:	4311      	orrs	r1, r2
 80004e2:	79fa      	ldrb	r2, [r7, #7]
 80004e4:	430a      	orrs	r2, r1
 80004e6:	4611      	mov	r1, r2
 80004e8:	4a1e      	ldr	r2, [pc, #120]	; (8000564 <MCU_Clock_Setup+0xf8>)
 80004ea:	430b      	orrs	r3, r1
 80004ec:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 80004ee:	4b1d      	ldr	r3, [pc, #116]	; (8000564 <MCU_Clock_Setup+0xf8>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	4a1c      	ldr	r2, [pc, #112]	; (8000564 <MCU_Clock_Setup+0xf8>)
 80004f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004f8:	6053      	str	r3, [r2, #4]
//    RCC->PLLCFGR = 0x4403019;
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 80004fa:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <MCU_Clock_Setup+0xf8>)
 80004fc:	4a19      	ldr	r2, [pc, #100]	; (8000564 <MCU_Clock_Setup+0xf8>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000502:	4b18      	ldr	r3, [pc, #96]	; (8000564 <MCU_Clock_Setup+0xf8>)
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	4a17      	ldr	r2, [pc, #92]	; (8000564 <MCU_Clock_Setup+0xf8>)
 8000508:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800050c:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV1;
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <MCU_Clock_Setup+0xf8>)
 8000510:	4a14      	ldr	r2, [pc, #80]	; (8000564 <MCU_Clock_Setup+0xf8>)
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	6093      	str	r3, [r2, #8]
//	RCC -> APB2ENR |= 0x4000;
	RCC -> CR |= RCC_CR_PLLON;
 8000516:	4b13      	ldr	r3, [pc, #76]	; (8000564 <MCU_Clock_Setup+0xf8>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a12      	ldr	r2, [pc, #72]	; (8000564 <MCU_Clock_Setup+0xf8>)
 800051c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000520:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8000522:	bf00      	nop
 8000524:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MCU_Clock_Setup+0xf8>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800052c:	2b00      	cmp	r3, #0
 800052e:	d0f9      	beq.n	8000524 <MCU_Clock_Setup+0xb8>
//	RCC -> CR |= RCC_CR_PLLI2SON;
//	while(!(RCC->CR & RCC_CR_PLLI2SRDY)){}
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <MCU_Clock_Setup+0xf8>)
 8000532:	689b      	ldr	r3, [r3, #8]
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <MCU_Clock_Setup+0xf8>)
 8000536:	f043 0302 	orr.w	r3, r3, #2
 800053a:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 800053c:	bf00      	nop
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <MCU_Clock_Setup+0xf8>)
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	f003 0308 	and.w	r3, r3, #8
 8000546:	2b08      	cmp	r3, #8
 8000548:	d1f9      	bne.n	800053e <MCU_Clock_Setup+0xd2>
SystemCoreClockUpdate();
 800054a:	f000 f833 	bl	80005b4 <SystemCoreClockUpdate>
//SysTick_Config(SystemCoreClock/1000);
//APB1CLK_SPEED = SystemAPB1_Clock_Speed();
//APB2CLK_SPEED = SystemAPB2_Clock_Speed();
RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800054e:	4b05      	ldr	r3, [pc, #20]	; (8000564 <MCU_Clock_Setup+0xf8>)
 8000550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000552:	4a04      	ldr	r2, [pc, #16]	; (8000564 <MCU_Clock_Setup+0xf8>)
 8000554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000558:	6453      	str	r3, [r2, #68]	; 0x44

}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40023800 	.word	0x40023800
 8000568:	40007000 	.word	0x40007000
 800056c:	40023c00 	.word	0x40023c00

08000570 <main>:




int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8000574:	f7ff ff7a 	bl	800046c <MCU_Clock_Setup>
	Console_Init(USART1, 9600);
 8000578:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800057c:	4801      	ldr	r0, [pc, #4]	; (8000584 <main+0x14>)
 800057e:	f7ff fe2b 	bl	80001d8 <Console_Init>





	for(;;);
 8000582:	e7fe      	b.n	8000582 <main+0x12>
 8000584:	40011000 	.word	0x40011000

08000588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <SystemInit+0x28>)
 800058e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <SystemInit+0x28>)
 8000594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <SystemInit+0x28>)
 800059e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005a2:	609a      	str	r2, [r3, #8]
#endif
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b087      	sub	sp, #28
 80005b8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2, plln;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
 80005c2:	2302      	movs	r3, #2
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	2302      	movs	r3, #2
 80005cc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80005ce:	4b37      	ldr	r3, [pc, #220]	; (80006ac <SystemCoreClockUpdate+0xf8>)
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	f003 030c 	and.w	r3, r3, #12
 80005d6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80005d8:	693b      	ldr	r3, [r7, #16]
 80005da:	2b08      	cmp	r3, #8
 80005dc:	d011      	beq.n	8000602 <SystemCoreClockUpdate+0x4e>
 80005de:	693b      	ldr	r3, [r7, #16]
 80005e0:	2b08      	cmp	r3, #8
 80005e2:	d84a      	bhi.n	800067a <SystemCoreClockUpdate+0xc6>
 80005e4:	693b      	ldr	r3, [r7, #16]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d003      	beq.n	80005f2 <SystemCoreClockUpdate+0x3e>
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	2b04      	cmp	r3, #4
 80005ee:	d004      	beq.n	80005fa <SystemCoreClockUpdate+0x46>
 80005f0:	e043      	b.n	800067a <SystemCoreClockUpdate+0xc6>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80005f2:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <SystemCoreClockUpdate+0xfc>)
 80005f4:	4a2f      	ldr	r2, [pc, #188]	; (80006b4 <SystemCoreClockUpdate+0x100>)
 80005f6:	601a      	str	r2, [r3, #0]
      break;
 80005f8:	e043      	b.n	8000682 <SystemCoreClockUpdate+0xce>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80005fa:	4b2d      	ldr	r3, [pc, #180]	; (80006b0 <SystemCoreClockUpdate+0xfc>)
 80005fc:	4a2e      	ldr	r2, [pc, #184]	; (80006b8 <SystemCoreClockUpdate+0x104>)
 80005fe:	601a      	str	r2, [r3, #0]
      break;
 8000600:	e03f      	b.n	8000682 <SystemCoreClockUpdate+0xce>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000602:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <SystemCoreClockUpdate+0xf8>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	0d9b      	lsrs	r3, r3, #22
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800060e:	4b27      	ldr	r3, [pc, #156]	; (80006ac <SystemCoreClockUpdate+0xf8>)
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000616:	607b      	str	r3, [r7, #4]
      plln = RCC->PLLCFGR & RCC_PLLCFGR_PLLN;
 8000618:	4b24      	ldr	r3, [pc, #144]	; (80006ac <SystemCoreClockUpdate+0xf8>)
 800061a:	685a      	ldr	r2, [r3, #4]
 800061c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000620:	4013      	ands	r3, r2
 8000622:	603b      	str	r3, [r7, #0]

      if (pllsource != 0)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d00c      	beq.n	8000644 <SystemCoreClockUpdate+0x90>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800062a:	4a23      	ldr	r2, [pc, #140]	; (80006b8 <SystemCoreClockUpdate+0x104>)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000632:	4a1e      	ldr	r2, [pc, #120]	; (80006ac <SystemCoreClockUpdate+0xf8>)
 8000634:	6852      	ldr	r2, [r2, #4]
 8000636:	0992      	lsrs	r2, r2, #6
 8000638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800063c:	fb02 f303 	mul.w	r3, r2, r3
 8000640:	617b      	str	r3, [r7, #20]
 8000642:	e00b      	b.n	800065c <SystemCoreClockUpdate+0xa8>
      }
      else
      {
        /* HSI used as PLL clock source */

        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000644:	4a1b      	ldr	r2, [pc, #108]	; (80006b4 <SystemCoreClockUpdate+0x100>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	fbb2 f3f3 	udiv	r3, r2, r3
 800064c:	4a17      	ldr	r2, [pc, #92]	; (80006ac <SystemCoreClockUpdate+0xf8>)
 800064e:	6852      	ldr	r2, [r2, #4]
 8000650:	0992      	lsrs	r2, r2, #6
 8000652:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000656:	fb02 f303 	mul.w	r3, r2, r3
 800065a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <SystemCoreClockUpdate+0xf8>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	0c1b      	lsrs	r3, r3, #16
 8000662:	f003 0303 	and.w	r3, r3, #3
 8000666:	3301      	adds	r3, #1
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800066c:	697a      	ldr	r2, [r7, #20]
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	fbb2 f3f3 	udiv	r3, r2, r3
 8000674:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <SystemCoreClockUpdate+0xfc>)
 8000676:	6013      	str	r3, [r2, #0]
      break;
 8000678:	e003      	b.n	8000682 <SystemCoreClockUpdate+0xce>
    default:
      SystemCoreClock = HSI_VALUE;
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <SystemCoreClockUpdate+0xfc>)
 800067c:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <SystemCoreClockUpdate+0x100>)
 800067e:	601a      	str	r2, [r3, #0]
      break;
 8000680:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <SystemCoreClockUpdate+0xf8>)
 8000684:	689b      	ldr	r3, [r3, #8]
 8000686:	091b      	lsrs	r3, r3, #4
 8000688:	f003 030f 	and.w	r3, r3, #15
 800068c:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <SystemCoreClockUpdate+0x108>)
 800068e:	5cd3      	ldrb	r3, [r2, r3]
 8000690:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <SystemCoreClockUpdate+0xfc>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	fa22 f303 	lsr.w	r3, r2, r3
 800069c:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <SystemCoreClockUpdate+0xfc>)
 800069e:	6013      	str	r3, [r2, #0]
}
 80006a0:	bf00      	nop
 80006a2:	371c      	adds	r7, #28
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	40023800 	.word	0x40023800
 80006b0:	20000000 	.word	0x20000000
 80006b4:	00f42400 	.word	0x00f42400
 80006b8:	017d7840 	.word	0x017d7840
 80006bc:	08000774 	.word	0x08000774

080006c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006c4:	f7ff ff60 	bl	8000588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c8:	480c      	ldr	r0, [pc, #48]	; (80006fc <LoopForever+0x6>)
  ldr r1, =_edata
 80006ca:	490d      	ldr	r1, [pc, #52]	; (8000700 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006cc:	4a0d      	ldr	r2, [pc, #52]	; (8000704 <LoopForever+0xe>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d0:	e002      	b.n	80006d8 <LoopCopyDataInit>

080006d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d6:	3304      	adds	r3, #4

080006d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006dc:	d3f9      	bcc.n	80006d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e0:	4c0a      	ldr	r4, [pc, #40]	; (800070c <LoopForever+0x16>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e4:	e001      	b.n	80006ea <LoopFillZerobss>

080006e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e8:	3204      	adds	r2, #4

080006ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ec:	d3fb      	bcc.n	80006e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ee:	f000 f811 	bl	8000714 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f2:	f7ff ff3d 	bl	8000570 <main>

080006f6 <LoopForever>:

LoopForever:
    b LoopForever
 80006f6:	e7fe      	b.n	80006f6 <LoopForever>
  ldr   r0, =_estack
 80006f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000700:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000704:	0800078c 	.word	0x0800078c
  ldr r2, =_sbss
 8000708:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800070c:	20000020 	.word	0x20000020

08000710 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <ADC_IRQHandler>
	...

08000714 <__libc_init_array>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	4d0d      	ldr	r5, [pc, #52]	; (800074c <__libc_init_array+0x38>)
 8000718:	4c0d      	ldr	r4, [pc, #52]	; (8000750 <__libc_init_array+0x3c>)
 800071a:	1b64      	subs	r4, r4, r5
 800071c:	10a4      	asrs	r4, r4, #2
 800071e:	2600      	movs	r6, #0
 8000720:	42a6      	cmp	r6, r4
 8000722:	d109      	bne.n	8000738 <__libc_init_array+0x24>
 8000724:	4d0b      	ldr	r5, [pc, #44]	; (8000754 <__libc_init_array+0x40>)
 8000726:	4c0c      	ldr	r4, [pc, #48]	; (8000758 <__libc_init_array+0x44>)
 8000728:	f000 f818 	bl	800075c <_init>
 800072c:	1b64      	subs	r4, r4, r5
 800072e:	10a4      	asrs	r4, r4, #2
 8000730:	2600      	movs	r6, #0
 8000732:	42a6      	cmp	r6, r4
 8000734:	d105      	bne.n	8000742 <__libc_init_array+0x2e>
 8000736:	bd70      	pop	{r4, r5, r6, pc}
 8000738:	f855 3b04 	ldr.w	r3, [r5], #4
 800073c:	4798      	blx	r3
 800073e:	3601      	adds	r6, #1
 8000740:	e7ee      	b.n	8000720 <__libc_init_array+0xc>
 8000742:	f855 3b04 	ldr.w	r3, [r5], #4
 8000746:	4798      	blx	r3
 8000748:	3601      	adds	r6, #1
 800074a:	e7f2      	b.n	8000732 <__libc_init_array+0x1e>
 800074c:	08000784 	.word	0x08000784
 8000750:	08000784 	.word	0x08000784
 8000754:	08000784 	.word	0x08000784
 8000758:	08000788 	.word	0x08000788

0800075c <_init>:
 800075c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800075e:	bf00      	nop
 8000760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000762:	bc08      	pop	{r3}
 8000764:	469e      	mov	lr, r3
 8000766:	4770      	bx	lr

08000768 <_fini>:
 8000768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800076a:	bf00      	nop
 800076c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800076e:	bc08      	pop	{r3}
 8000770:	469e      	mov	lr, r3
 8000772:	4770      	bx	lr
